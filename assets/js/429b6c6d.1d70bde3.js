"use strict";(self.webpackChunkgotocva_blog=self.webpackChunkgotocva_blog||[]).push([[639],{3905:(t,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>m});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},o=Object.keys(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var p=r.createContext({}),s=function(t){var e=r.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},c=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,o=t.originalType,p=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),d=s(a),m=n,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return a?r.createElement(g,i(i({ref:e},c),{},{components:a})):r.createElement(g,i({ref:e},c))}));function m(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:n,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},246:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const o={slug:"operators-in-javascript",title:"Operators in javascript",authors:{name:"Sivabharathy",title:"Sparkout tech solutions",url:"https://github.com/gotocva",image_url:"https://github.com/gotocva.png"},tags:["nodejs","operators in nodejs"]},i=void 0,l={unversionedId:"nodejs-crash-course/operators-in-js",id:"nodejs-crash-course/operators-in-js",title:"Operators in javascript",description:"There are different types of JavaScript operators:",source:"@site/docs/nodejs-crash-course/03.operators-in-js.mdx",sourceDirName:"nodejs-crash-course",slug:"/nodejs-crash-course/operators-in-javascript",permalink:"/docs/nodejs-crash-course/operators-in-javascript",draft:!1,tags:[{label:"nodejs",permalink:"/docs/tags/nodejs"},{label:"operators in nodejs",permalink:"/docs/tags/operators-in-nodejs"}],version:"current",sidebarPosition:3,frontMatter:{slug:"operators-in-javascript",title:"Operators in javascript",authors:{name:"Sivabharathy",title:"Sparkout tech solutions",url:"https://github.com/gotocva",image_url:"https://github.com/gotocva.png"},tags:["nodejs","operators in nodejs"]},sidebar:"tutorialSidebar",previous:{title:"var, let, and const in javaScript",permalink:"/docs/nodejs-crash-course/nodejs-var-let-const"},next:{title:"Array in javascript",permalink:"/docs/nodejs-crash-course/array-in-javascript"}},p={},s=[{value:"Adding JavaScript Strings",id:"adding-javascript-strings",level:3},{value:"Adding Strings and Numbers",id:"adding-strings-and-numbers",level:3}],c={toc:s};function u(t){let{components:e,...a}=t;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"There are different types of JavaScript operators:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Arithmetic Operators"),(0,n.kt)("li",{parentName:"ul"},"Assignment Operators"),(0,n.kt)("li",{parentName:"ul"},"Comparison Operators"),(0,n.kt)("li",{parentName:"ul"},"Logical Operators"),(0,n.kt)("li",{parentName:"ul"},"Conditional Operators"),(0,n.kt)("li",{parentName:"ul"},"Type Operators")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"center"},"Operator"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Definition"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"+"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Addition")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"-"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Subtraction")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"*"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Multiplication")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"**"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Exponentiation (ES2016)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"/"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Division")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"%"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Modulus (Division Remainder)")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"++"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Increment")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"--"),(0,n.kt)("td",{parentName:"tr",align:"center"},"Decrement")))),(0,n.kt)("p",null,"The assignment operator (=) assigns a value to a variable."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"let input = 10;  // assign value 10 into variable input\n")),(0,n.kt)("p",null,"Assign values to variables and add them together:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"let inputOne = 10;                      // assign the value 10 to inputOne\nlet inputTwo = 25;                      // assign the value 25 to inputTwo\nlet output = inputOne + inputTwo;       // assign the value 35 to output (10 + 25)\n")),(0,n.kt)("p",null,"The multiplication operator (*) multiplies numbers."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"let inputOne = 10;                      // assign the value 10 to inputOne\nlet inputTwo = 25;                      // assign the value 25 to inputTwo\nlet output = inputOne * inputTwo;       // assign the value 250 to output (10 * 25)\n")),(0,n.kt)("h3",{id:"adding-javascript-strings"},"Adding JavaScript Strings"),(0,n.kt)("p",null,"The + operator can also be used to add (concatenate) strings."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'let inputOne = "Siva";\nlet inputTwo = "bharathy";\nlet output = inputOne + " " + inputTwo;\n')),(0,n.kt)("p",null,"The result of output will be:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"Siva bharathy\n")),(0,n.kt)("p",null,"The += assignment operator can also be used to add (concatenate) strings:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'let inputOne = "Hello siva ";\ninputOne += "how are you";\n')),(0,n.kt)("p",null,"The result of inputOne will be:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"Hello siva how are you\n")),(0,n.kt)("h3",{id:"adding-strings-and-numbers"},"Adding Strings and Numbers"),(0,n.kt)("p",null,"Adding two numbers, will return the sum, but adding a number and a string will return a string:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},'const x = 5 + 5;\nconst y = "5" + 5;\nconst z = "siva" + 5;\n')),(0,n.kt)("p",null,"The result of x, y, and z will be:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"10\n55\nsiva5\n")),(0,n.kt)("p",null,"JavaScript Comparison Operators"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"center"},"Operator"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Definition"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"=="),(0,n.kt)("td",{parentName:"tr",align:"center"},"equal to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"==="),(0,n.kt)("td",{parentName:"tr",align:"center"},"equal value and equal type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"!="),(0,n.kt)("td",{parentName:"tr",align:"center"},"not equal")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"!=="),(0,n.kt)("td",{parentName:"tr",align:"center"},"not equal value or not equal type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},">"),(0,n.kt)("td",{parentName:"tr",align:"center"},"greater than")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"<"),(0,n.kt)("td",{parentName:"tr",align:"center"},"less than")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},">="),(0,n.kt)("td",{parentName:"tr",align:"center"},"greater than or equal to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"<="),(0,n.kt)("td",{parentName:"tr",align:"center"},"less than or equal to")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"center"},"?"),(0,n.kt)("td",{parentName:"tr",align:"center"},"ternary operator")))))}u.isMDXComponent=!0}}]);