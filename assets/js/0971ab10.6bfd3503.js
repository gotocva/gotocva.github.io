"use strict";(self.webpackChunkgotocva_blog=self.webpackChunkgotocva_blog||[]).push([[590],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=c(n),u=a,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||r;return n?o.createElement(m,s(s({ref:t},p),{},{components:n})):o.createElement(m,s({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6107:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={slug:"nodejs-getting-started",title:"Nodejs - Getting started",authors:{name:"Sivabharathy",title:"Sparkout tech solutions",url:"https://github.com/gotocva",image_url:"https://github.com/gotocva.png"},tags:["nodejs","getting started"]},s=void 0,i={unversionedId:"nodejs-crash-course/getting-started",id:"nodejs-crash-course/getting-started",title:"Nodejs - Getting started",description:"Introduction about NodeJS",source:"@site/docs/nodejs-crash-course/01.getting-started.mdx",sourceDirName:"nodejs-crash-course",slug:"/nodejs-crash-course/nodejs-getting-started",permalink:"/docs/nodejs-crash-course/nodejs-getting-started",draft:!1,tags:[{label:"nodejs",permalink:"/docs/tags/nodejs"},{label:"getting started",permalink:"/docs/tags/getting-started"}],version:"current",sidebarPosition:1,frontMatter:{slug:"nodejs-getting-started",title:"Nodejs - Getting started",authors:{name:"Sivabharathy",title:"Sparkout tech solutions",url:"https://github.com/gotocva",image_url:"https://github.com/gotocva.png"},tags:["nodejs","getting started"]},sidebar:"tutorialSidebar",previous:{title:"Nodejs - Crash course",permalink:"/docs/category/nodejs---crash-course"},next:{title:"var, let, and const in javaScript",permalink:"/docs/nodejs-crash-course/nodejs-var-let-const"}},l={},c=[{value:"Introduction about NodeJS",id:"introduction-about-nodejs",level:3},{value:"Learning path :",id:"learning-path-",level:3},{value:"Installation",id:"installation",level:3},{value:"Nodejs event loop",id:"nodejs-event-loop",level:3}],p={toc:c};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"introduction-about-nodejs"},"Introduction about NodeJS"),(0,a.kt)("p",null,"So, you want to run JavaScript on the server? You\u2019ve come to the right place. Node.js is an open source, cross-platform JavaScript runtime environment for developing server-side and networking applications. This popular server platform is built on Chrome's V8 JavaScript engine and enables you to use JavaScript code outside of a browser."),(0,a.kt)("p",null,"A Node.js app runs in a single process, without creating a new thread for every request. Node.js provides a set of asynchronous I/O primitives in its standard library that prevent JavaScript code from blocking and generally, libraries in Node.js are written using non-blocking paradigms, making blocking behavior the exception rather than the norm."),(0,a.kt)("p",null,"When Node.js performs an I/O operation, like reading from the network, accessing a database or the filesystem, instead of blocking the thread and wasting CPU cycles waiting, Node.js will resume the operations when the response comes back."),(0,a.kt)("p",null,"This allows Node.js to handle thousands of concurrent connections with a single server without introducing the burden of managing thread concurrency, which could be a significant source of bugs."),(0,a.kt)("p",null,"Node.js has a unique advantage because millions of frontend developers that write JavaScript for the browser are now able to write the server-side code in addition to the client-side code without the need to learn a completely different language."),(0,a.kt)("p",null,"In Node.js the new ECMAScript standards can be used without problems, as you don't have to wait for all your users to update their browsers - you are in charge of deciding which ECMAScript version to use by changing the Node.js version, and you can also enable specific experimental features by running Node.js with flags."),(0,a.kt)("h3",{id:"learning-path-"},"Learning path :"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Install the node program itself, along with npm for managing Node projects"),(0,a.kt)("li",{parentName:"ul"},"Take a tour of Node.js, including the Node runtime, the Read-Eval-Print Loop, the non-blocking I/O model, and the npm     ecosystem"),(0,a.kt)("li",{parentName:"ul"},"Examine Node's module system"),(0,a.kt)("li",{parentName:"ul"},"Learn how to use the Chrome V8 profiler"),(0,a.kt)("li",{parentName:"ul"},"Get an overview of promises"),(0,a.kt)("li",{parentName:"ul"},"Explore event loops, including creating custom events, using streams, and passing arguments to timer callbacks"),(0,a.kt)("li",{parentName:"ul"},"Join a mock Node project team, where you write your first Node.js application"),(0,a.kt)("li",{parentName:"ul"},"Understand the Node package manager and Node dependency management"),(0,a.kt)("li",{parentName:"ul"},"Learn about several tools that can help you test your Node applications to catch any bugs")),(0,a.kt)("h3",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Node.js can be installed in different ways. This post highlights the most common and convenient ones. Official packages for all the major platforms are available at ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.dev/download/"},"https://nodejs.dev/download/"),"."),(0,a.kt)("p",null,"One very convenient way to install Node.js is through a package manager. In this case, every operating system has its own. Other package managers for MacOS, Linux, and Windows are listed in ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.dev/download/package-manager/"},"https://nodejs.dev/download/package-manager/")),(0,a.kt)("p",null,"nvm is a popular way to run Node.js. It allows you to easily switch the Node.js version, and install new versions to try and easily rollback if something breaks. It is also very useful to test your code with old Node.js versions."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/nvm-sh/nvm"},"https://github.com/nvm-sh/nvm")," for more information about this option."),(0,a.kt)("p",null,"In any case, when Node.js is installed you'll have access to the node executable program in the command line.\nCheck the nodejs installation using command line. "),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(3530).Z,width:"682",height:"483"})),(0,a.kt)("p",null,"The above images shows the nodejs version ",(0,a.kt)("inlineCode",{parentName:"p"},"v16.16.0")," installed on the system."),(0,a.kt)("h3",{id:"nodejs-event-loop"},"Nodejs event loop"),(0,a.kt)("p",null,"The event loop is a set of six operations or phases that perform some very specific tasks. "),(0,a.kt)("p",null,"It's implemented by this C library called libuv. it's a quite extensive library. But this library is also responsible for keeping Node.js running with its non-blocking or asynchronous operations. "),(0,a.kt)("p",null,"What happens is when it receives a request, this request if it contains any long operations, things like I/O operations, for example, reading and writing files, or DB connections, or DB queries, and things like that, they will offload these operations to the system kernel. While it's doing that at the background, the event loop keeps processing on this request and so forth. To understand or see this little bit better, let's go back and look at the processing model. "),(0,a.kt)("p",null,"Here is the Node.js processing model we've seen earlier. A request comes in, the event loop process that request, if there's any running operations it send that off to the back for a tripple to processes those information, when they're done, they send back to the event loop and then it will send that up to the user. Let's take a look inside this red arrow area where all those phases occur. Here is the event loop cycle. We have the Node.js, single thread, a non-block, and event loop here. "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The first phase is the timer. This phase is responsible for executing any callbacks that are scheduled by two very important functions, the set timeout and set interval. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The second phase is depending callbacks. This one here executes any I/O callbacks and defer it to the next loop iteration. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Phase 3, the idle and prepare, it's an internal use only phase. It's responsible for executing any callbacks for some system operations like TCP errors and so forth. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The fourth phase is a really important one. This phase is responsible for two main functions. One, is it calculates how long it should block or poll for any I/O events or operations. Then two, it'll process events in the poll queue, and only that is also responsible for controlling when timers should execute. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The next phase, phase 5, is where it allows you, the developer, to execute any callbacks immediately after the polled phase 4. Mostly here, the most important function here is the set immediate function, and the callbacks in that function are invoked immediately and let them right in this phase. ")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The last phase, phase 6, is the close callback. This is more of a cleanup phase where it will close some callbacks, especially we do a socket I/O or connection, then when you close a connection and then it'll handle all these events, the close events rather at the particular phase."))))}d.isMDXComponent=!0},3530:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/nodejs-getting-started-18e7ea103a1f9e104d0d56be23690205.png"}}]);