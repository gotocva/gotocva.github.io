"use strict";(self.webpackChunkgotocva_blog=self.webpackChunkgotocva_blog||[]).push([[306],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||l;return a?n.createElement(g,o(o({ref:t},u),{},{components:a})):n.createElement(g,o({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<l;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},255:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const l={slug:"nodejs-best-practices",title:"Nodejs Best practices",authors:["gotocva"],tags:["nodejs","javascript","Nodejs Best practices"],keywords:["nodejs","javascript","Nodejs Best practices"],hide_table_of_contents:!1},o=void 0,s={permalink:"/blog/nodejs-best-practices",source:"@site/blog/nodejs/nodejs-best-practices.md",title:"Nodejs Best practices",description:"* ### Prefer const over let. Ditch the var",date:"2022-11-01T07:02:19.422Z",formattedDate:"November 1, 2022",tags:[{label:"nodejs",permalink:"/blog/tags/nodejs"},{label:"javascript",permalink:"/blog/tags/javascript"},{label:"Nodejs Best practices",permalink:"/blog/tags/nodejs-best-practices"}],readingTime:3.255,hasTruncateMarker:!1,authors:[{name:"Sivabharathy",title:"Technical Architect at Sparkout tech solutions",url:"https://github.com/gotocva",imageURL:"https://github.com/gotocva.png",key:"gotocva"}],frontMatter:{slug:"nodejs-best-practices",title:"Nodejs Best practices",authors:["gotocva"],tags:["nodejs","javascript","Nodejs Best practices"],keywords:["nodejs","javascript","Nodejs Best practices"],hide_table_of_contents:!1},nextItem:{title:"Basics of computers",permalink:"/blog/basics-of-computers"}},i={authorsImageUrls:[void 0]},c=[{value:"Naming conventions",id:"naming-conventions",level:3}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"prefer-const-over-let-ditch-the-var"},"Prefer const over let. Ditch the var"))),(0,r.kt)("p",null,"Using const means that once a variable is assigned, it cannot be reassigned. Preferring const will help you to not be tempted to use the same variable for different uses, and make your code clearer. If a variable needs to be reassigned, in a for loop, for example, use let to declare it. Another important aspect of let is that a variable declared using it is only available in the block scope in which it was defined. var is function scoped, not block-scoped, and shouldn't be used in ES6 now that you have const and let at your disposal"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"use-proper-naming-conventions-for-variables-constants-functions-and-classes"},"Use proper naming conventions for variables, constants, functions and classes"))),(0,r.kt)("p",null,"Use lowerCamelCase when naming constants, variables and functions, UpperCamelCase (capital first letter as well) when naming classes and UPPER_SNAKE_CASE when naming global or static variables. This will help you to easily distinguish between plain variables, functions, classes that require instantiation and variables declared at global module scope. Use descriptive names, but try to keep them short"),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// for global variables names we use the const/let keyword and UPPER_SNAKE_CASE\nlet MUTABLE_GLOBAL = "mutable value"\nconst GLOBAL_CONSTANT = "immutable value";\nconst CONFIG = {\n  key: "value",\n};\n\n// examples of UPPER_SNAKE_CASE convention in nodejs/javascript ecosystem\n// in javascript Math.PI module\nconst PI = 3.141592653589793;\n\n// https://github.com/nodejs/node/blob/b9f36062d7b5c5039498e98d2f2c180dca2a7065/lib/internal/http2/core.js#L303\n// in nodejs http2 module\nconst HTTP_STATUS_OK = 200;\nconst HTTP_STATUS_CREATED = 201;\n\n// for class name we use UpperCamelCase\nclass SomeClassExample {\n  // for static class properties we use UPPER_SNAKE_CASE\n  static STATIC_PROPERTY = "value";\n}\n\n// for functions names we use lowerCamelCase\nfunction doSomething() {\n  // for scoped variable names we use the const/let keyword and lowerCamelCase\n  const someConstExample = "immutable value";\n  let someMutableExample = "mutable value";\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"start-a-codeblocks-curly-braces-on-the-same-line"},"Start a Codeblock's Curly Braces on the Same Line"))),(0,r.kt)("p",null,"The opening curly braces of a code block should be on the same line as the opening statement"),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Do\nfunction usersList() {\n  // code block\n}\n\n// Avoid\nfunction usersList()\n{\n  // code block\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"require-modules-by-folders-as-opposed-to-the-files-directly"},"Require modules by folders, as opposed to the files directly"))),(0,r.kt)("p",null,"When developing a module/library in a folder, place an index.js file that exposes the module's internals so every consumer will pass through it. This serves as an 'interface' to your module and eases future changes without breaking the contract"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Do\nmodule.exports.SMSProvider = require("./SMSProvider");\nmodule.exports.SMSNumberResolver = require("./SMSNumberResolver");\n\n// Avoid\nmodule.exports.SMSProvider = require("./SMSProvider/SMSProvider.js");\nmodule.exports.SMSNumberResolver = require("./SMSNumberResolver/SMSNumberResolver.js");\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"use-async-await-avoid-callbacks"},"Use Async Await, avoid callbacks"))),(0,r.kt)("p",null,"Node 8 LTS now has full support for Async-await. This is a new way of dealing with asynchronous code which supersedes callbacks and promises. Async-await is non-blocking, and it makes asynchronous code look synchronous. The best gift you can give to your code is using async-await which provides a much more compact and familiar code syntax like try-catch"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("h3",{parentName:"li",id:"use-arrow-function-expressions-"},"Use arrow function expressions (=>)"))),(0,r.kt)("p",null,"Though it's recommended to use async-await and avoid function parameters when dealing with older APIs that accept promises or callbacks - arrow functions make the code structure more compact and keep the lexical context of the root function (i.e. this)"),(0,r.kt)("p",null,"First, let me give you an example of what we\u2019re talking about. The first time I noticed the backlash was the Twitter response to this function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const secret = msg => () => msg;\n")),(0,r.kt)("p",null,"It\u2019s equivalent to the following function expression:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const secret = function (msg) {\n  return function () {\n    return msg;\n  };\n};\n")),(0,r.kt)("h3",{id:"naming-conventions"},"Naming conventions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"What"),(0,r.kt)("th",{parentName:"tr",align:null},"How"),(0,r.kt)("th",{parentName:"tr",align:null},"Good"),(0,r.kt)("th",{parentName:"tr",align:null},"Bad"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Controller"),(0,r.kt)("td",{parentName:"tr",align:null},"singular"),(0,r.kt)("td",{parentName:"tr",align:null},"UserController"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},"UsersController")," ",(0,r.kt)("del",{parentName:"td"},"UsersController"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Route"),(0,r.kt)("td",{parentName:"tr",align:null},"plural"),(0,r.kt)("td",{parentName:"tr",align:null},"users/1"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},"user/1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Model"),(0,r.kt)("td",{parentName:"tr",align:null},"singular"),(0,r.kt)("td",{parentName:"tr",align:null},"User"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},"Users"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Schema"),(0,r.kt)("td",{parentName:"tr",align:null},"plural"),(0,r.kt)("td",{parentName:"tr",align:null},"user_profiles"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},"userProfile"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Schema column"),(0,r.kt)("td",{parentName:"tr",align:null},"snake_case without model name"),(0,r.kt)("td",{parentName:"tr",align:null},"meta_title"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},"MetaTitle; user_meta_title"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Method/Function"),(0,r.kt)("td",{parentName:"tr",align:null},"camelCase"),(0,r.kt)("td",{parentName:"tr",align:null},"getAll"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("del",{parentName:"td"},"get_all"))))))}p.isMDXComponent=!0}}]);